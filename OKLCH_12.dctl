
// https://github.com/hotgluebanjo
// https://github.com/calvinsilly

// 8 hue, 1 wrap, 2 anchor.
#define N_POINTS 17

#define EPS 1e-6f

DEFINE_UI_PARAMS(OVERALL_SAT, Overall Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(OVERALL_VAl, Overall Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(RED_HUE, Red Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(RED_SAT, Red Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(RED_VAL, Red Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(ORA_HUE, Orange Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(ORA_SAT, Orange Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(ORA_VAL, Orange Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(YEL_HUE, Yellow Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(YEL_SAT, Yellow Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(YEL_VAL, Yellow Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(LIM_HUE, Lime Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(LIM_SAT, Lime Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(LIM_VAL, Lime Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(GRN_HUE, Green Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(GRN_SAT, Green Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(GRN_VAL, Green Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(TEA_HUE, Teal Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(TEA_SAT, Teal Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(TEA_VAL, Teal Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(CYN_HUE, Cyan Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(CYN_SAT, Cyan Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(CYN_VAL, Cyan Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(LBL_HUE, Light Blue Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(LBL_SAT, Light Blue Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(LBL_VAL, Light Blue Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(BLU_HUE, Blue Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(BLU_SAT, Blue Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(BLU_VAL, Blue Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(PUR_HUE, Purple Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(PUR_SAT, Purple Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(PUR_VAL, Purple Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(MAG_HUE, Magenta Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(MAG_SAT, Magenta Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(MAG_VAL, Magenta Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(PIN_HUE, Pink Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(PIN_SAT, Pink Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(PIN_VAL, Pink Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(INVERT, Invert, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(GAMUT_CLIP, Gamut Clip, DCTLUI_CHECK_BOX, 1)

// CONVERSIONS TO OKLAB/OKLCH

__DEVICE__ float cbrtf(float x) {
	if (x < 0.0f) {
    x = _fabs(x);
    return _powf(x, 1.0f / 3.0f) * (-1.0f);
	} else {
    return _powf(x, 1.0f / 3.0f);
  };
}

__DEVICE__ float from_radians(float c) {
  float pi = 3.14159265359f;
  return c * (pi / 180.f);
}

__DEVICE__ float to_radians(float c) {
  float pi = 3.14159265359f;
  return c * (180.f / pi);
}

__DEVICE__ float3 mod_oklch_to_oklab(float3 c) {
  // Unset Hue 0 from HSV Red
  c.z = c.z + 0.0812052366f;

  if (c.z < 0.f) {
    c.z = c.z + 1.f;
  }

  if (c.z > 1.f) {
    c.z = c.z - 1.f;
  }

  // Normalize Hue 0-360
  c.z = c.z * 360.f;
	return make_float3(c.x, c.y * cos(from_radians(c.z)), c.y * sin(from_radians(c.z)));
}

__DEVICE__ float3 oklab_to_mod_oklch(float3 c) {
  float3 lch = make_float3(c.x, _sqrtf((c.y * c.y) + (c.z * c.z)), to_radians(_atan2f(c.z, c.y)));
  // Normalize Hue 0-1
  lch.z = lch.z * (1/360.f);
  
  // Set Hue 0 to HSV Red
  lch.z = lch.z - 0.0812052366f;

  if (lch.z < 0.f) {
    lch.z = lch.z + 1.f;
  }

  if (lch.z > 1.f) {
    lch.z = lch.z - 1.f;
  }

  return lch;
}

__DEVICE__ float3 linear_srgb_to_oklab(float3 c) 
{
  float l = 0.4122214708f * c.x + 0.5363325363f * c.y + 0.0514459929f * c.z;
	float m = 0.2119034982f * c.x + 0.6806995451f * c.y + 0.1073969566f * c.z;
	float s = 0.0883024619f * c.x + 0.2817188376f * c.y + 0.6299787005f * c.z;

  float l_ = cbrtf(l);
  float m_ = cbrtf(m);
  float s_ = cbrtf(s);

  return make_float3(
      0.2104542553f*l_ + 0.7936177850f*m_ - 0.0040720468f*s_,
      1.9779984951f*l_ - 2.4285922050f*m_ + 0.4505937099f*s_,
      0.0259040371f*l_ + 0.7827717662f*m_ - 0.8086757660f*s_
  );
}

__DEVICE__ float3 oklab_to_linear_srgb(float3 c) 
{
    float l_ = c.x + 0.3963377774f * c.y + 0.2158037573f * c.z;
    float m_ = c.x - 0.1055613458f * c.y - 0.0638541728f * c.z;
    float s_ = c.x - 0.0894841775f * c.y - 1.2914855480f * c.z;

    float l = l_*l_*l_;
    float m = m_*m_*m_;
    float s = s_*s_*s_;

    return make_float3(
		+4.0767416621f * l - 3.3077115913f * m + 0.2309699292f * s,
		-1.2684380046f * l + 2.6097574011f * m - 0.3413193965f * s,
		-0.0041960863f * l - 0.7034186147f * m + 1.7076147010f * s
    );
}

// GAMUT CLIPPING

// Finds the maximum saturation possible for a given hue that fits in sRGB
// Saturation here is defined as S = C/L
// a and b must be normalized so a^2 + b^2 == 1
__DEVICE__ float compute_max_saturation(float a, float b)
{
    // Max saturation will be when one of r, g or b goes below zero.

    // Select different coefficients depending on which component goes below zero first
    float k0, k1, k2, k3, k4, wl, wm, ws;

    if (-1.88170328f * a - 0.80936493f * b > 1)
    {
        // Red component
        k0 = +1.19086277f; k1 = +1.76576728f; k2 = +0.59662641f; k3 = +0.75515197f; k4 = +0.56771245f;
        wl = +4.0767416621f; wm = -3.3077115913f; ws = +0.2309699292f;
    }
    else if (1.81444104f * a - 1.19445276f * b > 1)
    {
        // Green component
        k0 = +0.73956515f; k1 = -0.45954404f; k2 = +0.08285427f; k3 = +0.12541070f; k4 = +0.14503204f;
        wl = -1.2684380046f; wm = +2.6097574011f; ws = -0.3413193965f;
    }
    else
    {
        // Blue component
        k0 = +1.35733652f; k1 = -0.00915799f; k2 = -1.15130210f; k3 = -0.50559606f; k4 = +0.00692167f;
        wl = -0.0041960863f; wm = -0.7034186147f; ws = +1.7076147010f;
    }

    // Approximate max saturation using a polynomial:
    float S = k0 + k1 * a + k2 * b + k3 * a * a + k4 * a * b;

    // Do one step Halley's method to get closer
    // this gives an error less than 10e6, except for some blue hues where the dS/dh is close to infinite
    // this should be sufficient for most applications, otherwise do two/three steps 

    float k_l = +0.3963377774f * a + 0.2158037573f * b;
    float k_m = -0.1055613458f * a - 0.0638541728f * b;
    float k_s = -0.0894841775f * a - 1.2914855480f * b;

    {
        float l_ = 1.f + S * k_l;
        float m_ = 1.f + S * k_m;
        float s_ = 1.f + S * k_s;

        float l = l_ * l_ * l_;
        float m = m_ * m_ * m_;
        float s = s_ * s_ * s_;

        float l_dS = 3.f * k_l * l_ * l_;
        float m_dS = 3.f * k_m * m_ * m_;
        float s_dS = 3.f * k_s * s_ * s_;

        float l_dS2 = 6.f * k_l * k_l * l_;
        float m_dS2 = 6.f * k_m * k_m * m_;
        float s_dS2 = 6.f * k_s * k_s * s_;

        float f  = wl * l     + wm * m     + ws * s;
        float f1 = wl * l_dS  + wm * m_dS  + ws * s_dS;
        float f2 = wl * l_dS2 + wm * m_dS2 + ws * s_dS2;

        S = S - f * f1 / (f1*f1 - 0.5f * f * f2);
    }

    return S;
}

// finds L_cusp and C_cusp for a given hue
// a and b must be normalized so a^2 + b^2 == 1
__DEVICE__ float2 find_cusp(float a, float b)
{
	// First, find the maximum saturation (saturation S = C/L)
	float S_cusp = compute_max_saturation(a, b);

	// Convert to linear sRGB to find the first point where at least one of r,g or b >= 1:
	float3 rgb_at_max = oklab_to_linear_srgb(make_float3(1, S_cusp * a, S_cusp * b));
	float L_cusp = cbrtf(1.f / _fmaxf(_fmaxf(rgb_at_max.x, rgb_at_max.y), rgb_at_max.z));
	float C_cusp = L_cusp * S_cusp;

	return make_float2(L_cusp , C_cusp);
}

// Finds intersection of the line defined by 
// L = L0 * (1 - t) + t * L1;
// C = t * C1;
// a and b must be normalized so a^2 + b^2 == 1
__DEVICE__ float find_gamut_intersection(float a, float b, float L1, float C1, float L0)
{
	// Find the cusp of the gamut triangle
	float2 cusp = find_cusp(a, b);

	// Find the intersection for upper and lower half seprately
	float t;
	if (((L1 - L0) * cusp.y - (cusp.x - L0) * C1) <= 0.f)
	{
		// Lower half

		t = cusp.y * L0 / (C1 * cusp.x + cusp.y * (L0 - L1));
	}
	else
	{
		// Upper half

		// First intersect with triangle
		t = cusp.y * (L0 - 1.f) / (C1 * (cusp.x - 1.f) + cusp.y * (L0 - L1));

		// Then one step Halley's method
		{
			float dL = L1 - L0;
			float dC = C1;

			float k_l = +0.3963377774f * a + 0.2158037573f * b;
			float k_m = -0.1055613458f * a - 0.0638541728f * b;
			float k_s = -0.0894841775f * a - 1.2914855480f * b;

			float l_dt = dL + dC * k_l;
			float m_dt = dL + dC * k_m;
			float s_dt = dL + dC * k_s;

			
			// If higher accuracy is required, 2 or 3 iterations of the following block can be used:
			{
				float L = L0 * (1.f - t) + t * L1;
				float C = t * C1;

				float l_ = L + C * k_l;
				float m_ = L + C * k_m;
				float s_ = L + C * k_s;

				float l = l_ * l_ * l_;
				float m = m_ * m_ * m_;
				float s = s_ * s_ * s_;

				float ldt = 3 * l_dt * l_ * l_;
				float mdt = 3 * m_dt * m_ * m_;
				float sdt = 3 * s_dt * s_ * s_;

				float ldt2 = 6 * l_dt * l_dt * l_;
				float mdt2 = 6 * m_dt * m_dt * m_;
				float sdt2 = 6 * s_dt * s_dt * s_;

				float r = 4.0767416621f * l - 3.3077115913f * m + 0.2309699292f * s - 1;
				float r1 = 4.0767416621f * ldt - 3.3077115913f * mdt + 0.2309699292f * sdt;
				float r2 = 4.0767416621f * ldt2 - 3.3077115913f * mdt2 + 0.2309699292f * sdt2;

				float u_r = r1 / (r1 * r1 - 0.5f * r * r2);
				float t_r = -r * u_r;

				float g = -1.2684380046f * l + 2.6097574011f * m - 0.3413193965f * s - 1;
				float g1 = -1.2684380046f * ldt + 2.6097574011f * mdt - 0.3413193965f * sdt;
				float g2 = -1.2684380046f * ldt2 + 2.6097574011f * mdt2 - 0.3413193965f * sdt2;

				float u_g = g1 / (g1 * g1 - 0.5f * g * g2);
				float t_g = -g * u_g;

				float b = -0.0041960863f * l - 0.7034186147f * m + 1.7076147010f * s - 1;
				float b1 = -0.0041960863f * ldt - 0.7034186147f * mdt + 1.7076147010f * sdt;
				float b2 = -0.0041960863f * ldt2 - 0.7034186147f * mdt2 + 1.7076147010f * sdt2;

				float u_b = b1 / (b1 * b1 - 0.5f * b * b2);
				float t_b = -b * u_b;

				t_r = u_r >= 0.f ? t_r : 3.402823466e+38F;
				t_g = u_g >= 0.f ? t_g : 3.402823466e+38F;
				t_b = u_b >= 0.f ? t_b : 3.402823466e+38F;

				t += _fminf(t_r, _fminf(t_g, t_b));
			}
		}
	}

	return t;
}

__DEVICE__ float sgn(float x)
{
	return (float)(0.f < x) - (float)(x < 0.f);
}

__DEVICE__ float3 gamut_clip(float3 rgb, float3 lab, float alpha = 0.5f)
{

  if (rgb.x < 1 && rgb.y < 1 && rgb.z < 1 && rgb.x > 0 && rgb.y > 0 && rgb.z > 0) return rgb;

	float L = lab.x;
	float eps = 0.00001f;
	float C = _fmaxf(eps, _sqrtf(lab.y * lab.y + lab.z * lab.z));
	float a_ = lab.y / C;
	float b_ = lab.z / C;

	float Ld = L - 0.5f;
	float e1 = 0.5f + _fabs(Ld) + alpha * C;
	float L0 = 0.5f*(1.f + sgn(Ld)*(e1 - _sqrtf(e1*e1 - 2.f *_fabs(Ld))));

	float t = find_gamut_intersection(a_, b_, L, C, L0);
	float L_clipped = L0 * (1.f - t) + t * L;
	float C_clipped = t * C;

	return oklab_to_linear_srgb(make_float3(L_clipped, C_clipped * a_, C_clipped * b_));
}


// LCH CONTROLS

__DEVICE__ inline float spow(float x, float p) {
    if (x < 0.0f) {
        return -_powf(-x, p);
    }
    return _powf(x, p);
}

__DEVICE__ float interp_linear(__PRIVATE__ float2 *pts, int n_pts, float x) {
    if (x <= pts[0].x) {
        return pts[0].y;
    }

    if (x >= pts[n_pts - 1].x) {
        return pts[n_pts - 1].y;
    }

    int i = 0;
    int upper = n_pts - 1;
    while (i != upper - 1) {
        int m = i + (upper - i) / 2;
        if (x >= pts[m].x) {
            i = m;
        } else {
            upper = m;
        }
    }

    float t = (x - pts[i].x) / (pts[i + 1].x - pts[i].x);
    return _mix(pts[i].y, pts[i + 1].y, t);
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
	
	float3 rgb = make_float3(p_R, p_G, p_B);

  rgb = oklab_to_mod_oklch(linear_srgb_to_oklab(rgb));
  float hue = rgb.z;
  float sat = rgb.y;
  float val = rgb.x;

  float ORA_HUE_BIAS = 0.1118546484f;
  float YEL_HUE_BIAS = 0.2237092969f;
  float LIM_HUE_BIAS = 0.2691622230f;
  float GRN_HUE_BIAS = 0.3146151491f;
  float TEA_HUE_BIAS = 0.3872188451f;
  float CYN_HUE_BIAS = 0.4598225411f;
  float LBL_HUE_BIAS = 0.5560489413f;
  float BLU_HUE_BIAS = 0.6522753414f;
  float PUR_HUE_BIAS = 0.7415906079f;
  float MAG_HUE_BIAS = 0.8309058744f;
  float PIN_HUE_BIAS = 0.9154529372f;

  float2 hue_curve[N_POINTS] = {
    {MAG_HUE_BIAS - 1.0f, MAG_HUE + MAG_HUE_BIAS - 1.0f},
    {PIN_HUE_BIAS - 1.0f, PIN_HUE + PIN_HUE_BIAS - 1.0f},
    {0.0f,                RED_HUE},
    {ORA_HUE_BIAS,        ORA_HUE + ORA_HUE_BIAS},
    {YEL_HUE_BIAS,        YEL_HUE + YEL_HUE_BIAS},
    {LIM_HUE_BIAS,        LIM_HUE + LIM_HUE_BIAS},
    {GRN_HUE_BIAS,        GRN_HUE + GRN_HUE_BIAS},
    {TEA_HUE_BIAS,        TEA_HUE + TEA_HUE_BIAS},
    {CYN_HUE_BIAS,        CYN_HUE + CYN_HUE_BIAS},
    {LBL_HUE_BIAS,        LBL_HUE + LBL_HUE_BIAS},
    {BLU_HUE_BIAS,        BLU_HUE + BLU_HUE_BIAS},
    {PUR_HUE_BIAS,        PUR_HUE + PUR_HUE_BIAS},
    {MAG_HUE_BIAS,        MAG_HUE + MAG_HUE_BIAS},
    {PIN_HUE_BIAS,        PIN_HUE + PIN_HUE_BIAS},
    {1.0f,                RED_HUE + 1.0f},
    {ORA_HUE_BIAS + 1.0f, ORA_HUE + ORA_HUE_BIAS + 1.0f},
    {YEL_HUE_BIAS + 1.0f, YEL_HUE + YEL_HUE_BIAS + 1.0f}
  };

  if (INVERT) {
    for (int i = 0; i < N_POINTS; i += 1) {
        hue_curve[i] = make_float2(hue_curve[i].y, hue_curve[i].x);
    }
  }

  float2 sat_curve[N_POINTS] = {
    {MAG_HUE_BIAS - 1.0f, MAG_SAT},
    {PIN_HUE_BIAS - 1.0f, PIN_SAT},
    {0.0f,                RED_SAT},
    {ORA_HUE_BIAS,        ORA_SAT},
    {YEL_HUE_BIAS,        YEL_SAT},
    {LIM_HUE_BIAS,        LIM_SAT},
    {GRN_HUE_BIAS,        GRN_SAT},
    {TEA_HUE_BIAS,        TEA_SAT},
    {CYN_HUE_BIAS,        CYN_SAT},
    {LBL_HUE_BIAS,        LBL_SAT},
    {BLU_HUE_BIAS,        BLU_SAT},
    {PUR_HUE_BIAS,        PUR_SAT},
    {MAG_HUE_BIAS,        MAG_SAT},
    {PIN_HUE_BIAS,        PIN_SAT},
    {1.0f,                RED_SAT},
    {ORA_HUE_BIAS + 1.0f, ORA_SAT},
    {YEL_HUE_BIAS + 1.0f, YEL_SAT}
  };

  float2 val_curve[N_POINTS] = {
    {MAG_HUE_BIAS - 1.0f, MAG_VAL},
    {PIN_HUE_BIAS - 1.0f, PIN_VAL},
    {0.0f,                RED_VAL},
    {ORA_HUE_BIAS,        ORA_VAL},
    {YEL_HUE_BIAS,        YEL_VAL},
    {LIM_HUE_BIAS,        LIM_VAL},
    {GRN_HUE_BIAS,        GRN_VAL},
    {TEA_HUE_BIAS,        TEA_VAL},
    {CYN_HUE_BIAS,        CYN_VAL},
    {LBL_HUE_BIAS,        LBL_VAL},
    {BLU_HUE_BIAS,        BLU_VAL},
    {PUR_HUE_BIAS,        PUR_VAL},
    {MAG_HUE_BIAS,        MAG_VAL},
    {PIN_HUE_BIAS,        PIN_VAL},
    {1.0f,                RED_VAL},
    {ORA_HUE_BIAS + 1.0f, ORA_VAL},
    {YEL_HUE_BIAS + 1.0f, YEL_VAL}
  };

  float hue_result = interp_linear(hue_curve, N_POINTS, hue);
  float hue_switch = INVERT ? hue : hue_result;

  float sat_factor = interp_linear(sat_curve, N_POINTS, hue_switch) * OVERALL_SAT;
  float val_factor = interp_linear(val_curve, N_POINTS, hue_switch) + OVERALL_VAl;

  if (!INVERT) {
      sat_factor = 1.0f / sat_factor;
  }

  float sat_result = spow(sat, sat_factor);
  float sat_switch = INVERT ? sat : sat_result;

  val_factor = _fmaxf(1.0f + sat_switch * val_factor, EPS);
  float val_result;

  if (INVERT) {
      val_result = val / val_factor;
  } else {
      val_result = val * val_factor;
  }

  rgb = mod_oklch_to_oklab(make_float3(val_result, sat_result, hue_result));
  rgb = GAMUT_CLIP ? gamut_clip(oklab_to_linear_srgb(rgb), rgb) : oklab_to_linear_srgb(rgb);

	return rgb;
}
	
	