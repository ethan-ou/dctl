// https://github.com/hotgluebanjo
// https://github.com/calvinsilly

// 12 hue, 1 wrap, 4 anchor.
#define N_POINTS 17

#define EPS 1e-6f

DEFINE_UI_PARAMS(OVERALL_SAT, Overall Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(OVERALL_VAL, Overall Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(RED_HUE, Red Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(RED_SAT, Red Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(RED_VAL, Red Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(ORA_HUE, Orange Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(ORA_SAT, Orange Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(ORA_VAL, Orange Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(YEL_HUE, Yellow Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(YEL_SAT, Yellow Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(YEL_VAL, Yellow Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(LIM_HUE, Lime Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(LIM_SAT, Lime Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(LIM_VAL, Lime Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(GRN_HUE, Green Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(GRN_SAT, Green Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(GRN_VAL, Green Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(TEA_HUE, Teal Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(TEA_SAT, Teal Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(TEA_VAL, Teal Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(CYN_HUE, Cyan Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(CYN_SAT, Cyan Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(CYN_VAL, Cyan Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(LBL_HUE, Light Blue Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(LBL_SAT, Light Blue Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(LBL_VAL, Light Blue Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(BLU_HUE, Blue Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(BLU_SAT, Blue Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(BLU_VAL, Blue Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(PUR_HUE, Purple Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(PUR_SAT, Purple Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(PUR_VAL, Purple Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(MAG_HUE, Magenta Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(MAG_SAT, Magenta Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(MAG_VAL, Magenta Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(PIN_HUE, Pink Hue, DCTLUI_SLIDER_FLOAT, 0.0, -0.166, 0.166, 0.001)
DEFINE_UI_PARAMS(PIN_SAT, Pink Sat, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(PIN_VAL, Pink Val, DCTLUI_SLIDER_FLOAT, 0.0, -3.0, 3.0, 0.001)

DEFINE_UI_PARAMS(INVERT, Invert, DCTLUI_CHECK_BOX, 0)

// CONVERSIONS TO OKLAB/OKLCH

__DEVICE__ float cbrtf(float x) {
	if (x < 0.0f) {
    x = _fabs(x);
    return _powf(x, 1.0f / 3.0f) * (-1.0f);
	} else {
    return _powf(x, 1.0f / 3.0f);
  };
}

__DEVICE__ float from_radians(float c) {
  float pi = 3.14159265359f;
  return c * (pi / 180.f);
}

__DEVICE__ float to_radians(float c) {
  float pi = 3.14159265359f;
  return c * (180.f / pi);
}

__DEVICE__ float3 mod_oklch_to_oklab(float3 c) {
  // Unset Hue 0 from HSV Red
  c.z = c.z + 0.0812052366f;

  if (c.z < 0.f) {
    c.z = c.z + 1.f;
  }

  if (c.z > 1.f) {
    c.z = c.z - 1.f;
  }

  // Normalize Hue 0-360
  c.z = c.z * 360.f;
	return make_float3(c.x, c.y * cos(from_radians(c.z)), c.y * sin(from_radians(c.z)));
}

__DEVICE__ float3 oklab_to_mod_oklch(float3 c) {
  float3 lch = make_float3(c.x, _sqrtf((c.y * c.y) + (c.z * c.z)), to_radians(_atan2f(c.z, c.y)));
  // Normalize Hue 0-1
  lch.z = lch.z * (1/360.f);
  
  // Set Hue 0 to HSV Red
  lch.z = lch.z - 0.0812052366f;

  if (lch.z < 0.f) {
    lch.z = lch.z + 1.f;
  }

  if (lch.z > 1.f) {
    lch.z = lch.z - 1.f;
  }

  return lch;
}

__DEVICE__ float3 linear_srgb_to_oklab(float3 c) 
{
  float l = 0.4122214708f * c.x + 0.5363325363f * c.y + 0.0514459929f * c.z;
	float m = 0.2119034982f * c.x + 0.6806995451f * c.y + 0.1073969566f * c.z;
	float s = 0.0883024619f * c.x + 0.2817188376f * c.y + 0.6299787005f * c.z;

  float l_ = cbrtf(l);
  float m_ = cbrtf(m);
  float s_ = cbrtf(s);

  return make_float3(
      0.2104542553f*l_ + 0.7936177850f*m_ - 0.0040720468f*s_,
      1.9779984951f*l_ - 2.4285922050f*m_ + 0.4505937099f*s_,
      0.0259040371f*l_ + 0.7827717662f*m_ - 0.8086757660f*s_
  );
}

__DEVICE__ float3 oklab_to_linear_srgb(float3 c) 
{
    float l_ = c.x + 0.3963377774f * c.y + 0.2158037573f * c.z;
    float m_ = c.x - 0.1055613458f * c.y - 0.0638541728f * c.z;
    float s_ = c.x - 0.0894841775f * c.y - 1.2914855480f * c.z;

    float l = l_*l_*l_;
    float m = m_*m_*m_;
    float s = s_*s_*s_;

    return make_float3(
		+4.0767416621f * l - 3.3077115913f * m + 0.2309699292f * s,
		-1.2684380046f * l + 2.6097574011f * m - 0.3413193965f * s,
		-0.0041960863f * l - 0.7034186147f * m + 1.7076147010f * s
    );
}

// LCH CONTROLS

__DEVICE__ inline float spow(float x, float p) {
    if (x < 0.0f) {
        return -_powf(-x, p);
    }
    return _powf(x, p);
}

__DEVICE__ float interp_linear(__PRIVATE__ float2 *pts, int n_pts, float x) {
    if (x <= pts[0].x) {
        return pts[0].y;
    }

    if (x >= pts[n_pts - 1].x) {
        return pts[n_pts - 1].y;
    }

    int i = 0;
    int upper = n_pts - 1;
    while (i != upper - 1) {
        int m = i + (upper - i) / 2;
        if (x >= pts[m].x) {
            i = m;
        } else {
            upper = m;
        }
    }

    float t = (x - pts[i].x) / (pts[i + 1].x - pts[i].x);

    return _mix(pts[i].y, pts[i + 1].y, t);
}

__DEVICE__ float cross_mult(float primary, float secondary_1, float secondary_2) {
  return 0.5f * primary + 0.25f * secondary_1 + 0.25f * secondary_2;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
	
	float3 rgb = make_float3(p_R, p_G, p_B);

  rgb = oklab_to_mod_oklch(linear_srgb_to_oklab(rgb));
  float hue = rgb.z;
  float sat = rgb.y;
  float val = rgb.x;

  float ORA_HUE_BIAS = 0.1118546484f;
  float YEL_HUE_BIAS = 0.2237092969f;
  float LIM_HUE_BIAS = 0.2691622230f;
  float GRN_HUE_BIAS = 0.3146151491f;
  float TEA_HUE_BIAS = 0.3872188451f;
  float CYN_HUE_BIAS = 0.4598225411f;
  float LBL_HUE_BIAS = 0.5560489413f;
  float BLU_HUE_BIAS = 0.6522753414f;
  float PUR_HUE_BIAS = 0.7415906079f;
  float MAG_HUE_BIAS = 0.8309058744f;
  float PIN_HUE_BIAS = 0.9154529372f;

  float2 hue_curve[N_POINTS] = {
    {MAG_HUE_BIAS - 1.0f, cross_mult(MAG_HUE, PUR_HUE, PIN_HUE) + MAG_HUE_BIAS - 1.0f},
    {PIN_HUE_BIAS - 1.0f, cross_mult(PIN_HUE, MAG_HUE, RED_HUE) + PIN_HUE_BIAS - 1.0f},
    {0.0f,                cross_mult(RED_HUE, PIN_HUE, ORA_HUE)},
    {ORA_HUE_BIAS,        cross_mult(ORA_HUE, RED_HUE, YEL_HUE) + ORA_HUE_BIAS},
    {YEL_HUE_BIAS,        cross_mult(YEL_HUE, ORA_HUE, LIM_HUE) + YEL_HUE_BIAS},
    {LIM_HUE_BIAS,        cross_mult(LIM_HUE, YEL_HUE, GRN_HUE) + LIM_HUE_BIAS},
    {GRN_HUE_BIAS,        cross_mult(GRN_HUE, LIM_HUE, TEA_HUE) + GRN_HUE_BIAS},
    {TEA_HUE_BIAS,        cross_mult(TEA_HUE, GRN_HUE, CYN_HUE) + TEA_HUE_BIAS},
    {CYN_HUE_BIAS,        cross_mult(CYN_HUE, TEA_HUE, LBL_HUE) + CYN_HUE_BIAS},
    {LBL_HUE_BIAS,        cross_mult(LBL_HUE, CYN_HUE, BLU_HUE) + LBL_HUE_BIAS},
    {BLU_HUE_BIAS,        cross_mult(BLU_HUE, LBL_HUE, PUR_HUE) + BLU_HUE_BIAS},
    {PUR_HUE_BIAS,        cross_mult(PUR_HUE, BLU_HUE, MAG_HUE) + PUR_HUE_BIAS},
    {MAG_HUE_BIAS,        cross_mult(MAG_HUE, PUR_HUE, PIN_HUE) + MAG_HUE_BIAS},
    {PIN_HUE_BIAS,        cross_mult(PIN_HUE, MAG_HUE, RED_HUE) + PIN_HUE_BIAS},
    {1.0f,                cross_mult(RED_HUE, PIN_HUE, ORA_HUE) + 1.0f},
    {ORA_HUE_BIAS + 1.0f, cross_mult(ORA_HUE, RED_HUE, YEL_HUE) + ORA_HUE_BIAS + 1.0f},
    {YEL_HUE_BIAS + 1.0f, cross_mult(YEL_HUE, ORA_HUE, LIM_HUE) + YEL_HUE_BIAS + 1.0f}
  };

  if (INVERT) {
    for (int i = 0; i < N_POINTS; i += 1) {
        hue_curve[i] = make_float2(hue_curve[i].y, hue_curve[i].x);
    }
  }

  float2 sat_curve[N_POINTS] = {
    {MAG_HUE_BIAS - 1.0f, cross_mult(MAG_SAT, PUR_SAT, PIN_SAT)},
    {PIN_HUE_BIAS - 1.0f, cross_mult(PIN_SAT, MAG_SAT, RED_SAT)},
    {0.0f,                cross_mult(RED_SAT, PIN_SAT, ORA_SAT)},
    {ORA_HUE_BIAS,        cross_mult(ORA_SAT, RED_SAT, YEL_SAT)},
    {YEL_HUE_BIAS,        cross_mult(YEL_SAT, ORA_SAT, LIM_SAT)},
    {LIM_HUE_BIAS,        cross_mult(LIM_SAT, YEL_SAT, GRN_SAT)},
    {GRN_HUE_BIAS,        cross_mult(GRN_SAT, LIM_SAT, TEA_SAT)},
    {TEA_HUE_BIAS,        cross_mult(TEA_SAT, GRN_SAT, CYN_SAT)},
    {CYN_HUE_BIAS,        cross_mult(CYN_SAT, TEA_SAT, LBL_SAT)},
    {LBL_HUE_BIAS,        cross_mult(LBL_SAT, CYN_SAT, BLU_SAT)},
    {BLU_HUE_BIAS,        cross_mult(BLU_SAT, LBL_SAT, PUR_SAT)},
    {PUR_HUE_BIAS,        cross_mult(PUR_SAT, BLU_SAT, MAG_SAT)},
    {MAG_HUE_BIAS,        cross_mult(MAG_SAT, PUR_SAT, PIN_SAT)},
    {PIN_HUE_BIAS,        cross_mult(PIN_SAT, MAG_SAT, RED_SAT)},
    {1.0f,                cross_mult(RED_SAT, PIN_SAT, ORA_SAT)},
    {ORA_HUE_BIAS + 1.0f, cross_mult(ORA_SAT, RED_SAT, YEL_SAT)},
    {YEL_HUE_BIAS + 1.0f, cross_mult(YEL_SAT, ORA_SAT, LIM_SAT)}
  };

  float2 val_curve[N_POINTS] = {
    {MAG_HUE_BIAS - 1.0f, cross_mult(MAG_VAL, PUR_VAL, PIN_VAL)},
    {PIN_HUE_BIAS - 1.0f, cross_mult(PIN_VAL, MAG_VAL, RED_VAL)},
    {0.0f,                cross_mult(RED_VAL, PIN_VAL, ORA_VAL)},
    {ORA_HUE_BIAS,        cross_mult(ORA_VAL, RED_VAL, YEL_VAL)},
    {YEL_HUE_BIAS,        cross_mult(YEL_VAL, ORA_VAL, LIM_VAL)},
    {LIM_HUE_BIAS,        cross_mult(LIM_VAL, YEL_VAL, GRN_VAL)},
    {GRN_HUE_BIAS,        cross_mult(GRN_VAL, LIM_VAL, TEA_VAL)},
    {TEA_HUE_BIAS,        cross_mult(TEA_VAL, GRN_VAL, CYN_VAL)},
    {CYN_HUE_BIAS,        cross_mult(CYN_VAL, TEA_VAL, LBL_VAL)},
    {LBL_HUE_BIAS,        cross_mult(LBL_VAL, CYN_VAL, BLU_VAL)},
    {BLU_HUE_BIAS,        cross_mult(BLU_VAL, LBL_VAL, PUR_VAL)},
    {PUR_HUE_BIAS,        cross_mult(PUR_VAL, BLU_VAL, MAG_VAL)},
    {MAG_HUE_BIAS,        cross_mult(MAG_VAL, PUR_VAL, PIN_VAL)},
    {PIN_HUE_BIAS,        cross_mult(PIN_VAL, MAG_VAL, RED_VAL)},
    {1.0f,                cross_mult(RED_VAL, PIN_VAL, ORA_VAL)},
    {ORA_HUE_BIAS + 1.0f, cross_mult(ORA_VAL, RED_VAL, YEL_VAL)},
    {YEL_HUE_BIAS + 1.0f, cross_mult(YEL_VAL, ORA_VAL, LIM_VAL)}
  };

  float hue_result = interp_linear(hue_curve, N_POINTS, hue);
  float hue_switch = INVERT ? hue : hue_result;

  float sat_factor = interp_linear(sat_curve, N_POINTS, hue_switch) * OVERALL_SAT;
  float val_factor = interp_linear(val_curve, N_POINTS, hue_switch) + OVERALL_VAL;

  if (!INVERT) {
      sat_factor = 1.0f / sat_factor;
  }

  float sat_result = spow(sat, sat_factor);
  float sat_switch = INVERT ? sat : sat_result;

  val_factor = _fmaxf(1.0f + sat_switch * val_factor, EPS);
  float val_result;

  if (INVERT) {
      val_result = val / spow(val_factor, val);
  } else {
      val_result = val * spow(val_factor, val);
  }

  rgb = mod_oklch_to_oklab(make_float3(val_result, sat_result, hue_result));
  rgb = oklab_to_linear_srgb(rgb);

	return rgb;
}
